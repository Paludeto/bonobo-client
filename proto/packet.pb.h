// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_packet_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_packet_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "command.pb.h"
#include "replacement.pb.h"
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_packet_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_packet_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_packet_2eproto;
namespace fira_message {
namespace sim_to_ref {
class Environment;
struct EnvironmentDefaultTypeInternal;
extern EnvironmentDefaultTypeInternal _Environment_default_instance_;
class Packet;
struct PacketDefaultTypeInternal;
extern PacketDefaultTypeInternal _Packet_default_instance_;
}  // namespace sim_to_ref
}  // namespace fira_message
PROTOBUF_NAMESPACE_OPEN
template<> ::fira_message::sim_to_ref::Environment* Arena::CreateMaybeMessage<::fira_message::sim_to_ref::Environment>(Arena*);
template<> ::fira_message::sim_to_ref::Packet* Arena::CreateMaybeMessage<::fira_message::sim_to_ref::Packet>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace fira_message {
namespace sim_to_ref {

// ===================================================================

class Packet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fira_message.sim_to_ref.Packet) */ {
 public:
  inline Packet() : Packet(nullptr) {}
  ~Packet() override;
  explicit constexpr Packet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Packet(const Packet& from);
  Packet(Packet&& from) noexcept
    : Packet() {
    *this = ::std::move(from);
  }

  inline Packet& operator=(const Packet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Packet& operator=(Packet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Packet& default_instance() {
    return *internal_default_instance();
  }
  static inline const Packet* internal_default_instance() {
    return reinterpret_cast<const Packet*>(
               &_Packet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Packet& a, Packet& b) {
    a.Swap(&b);
  }
  inline void Swap(Packet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Packet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Packet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Packet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Packet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Packet& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Packet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fira_message.sim_to_ref.Packet";
  }
  protected:
  explicit Packet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCmdFieldNumber = 1,
    kReplaceFieldNumber = 2,
  };
  // .fira_message.sim_to_ref.Commands cmd = 1;
  bool has_cmd() const;
  private:
  bool _internal_has_cmd() const;
  public:
  void clear_cmd();
  const ::fira_message::sim_to_ref::Commands& cmd() const;
  PROTOBUF_NODISCARD ::fira_message::sim_to_ref::Commands* release_cmd();
  ::fira_message::sim_to_ref::Commands* mutable_cmd();
  void set_allocated_cmd(::fira_message::sim_to_ref::Commands* cmd);
  private:
  const ::fira_message::sim_to_ref::Commands& _internal_cmd() const;
  ::fira_message::sim_to_ref::Commands* _internal_mutable_cmd();
  public:
  void unsafe_arena_set_allocated_cmd(
      ::fira_message::sim_to_ref::Commands* cmd);
  ::fira_message::sim_to_ref::Commands* unsafe_arena_release_cmd();

  // .fira_message.sim_to_ref.Replacement replace = 2;
  bool has_replace() const;
  private:
  bool _internal_has_replace() const;
  public:
  void clear_replace();
  const ::fira_message::sim_to_ref::Replacement& replace() const;
  PROTOBUF_NODISCARD ::fira_message::sim_to_ref::Replacement* release_replace();
  ::fira_message::sim_to_ref::Replacement* mutable_replace();
  void set_allocated_replace(::fira_message::sim_to_ref::Replacement* replace);
  private:
  const ::fira_message::sim_to_ref::Replacement& _internal_replace() const;
  ::fira_message::sim_to_ref::Replacement* _internal_mutable_replace();
  public:
  void unsafe_arena_set_allocated_replace(
      ::fira_message::sim_to_ref::Replacement* replace);
  ::fira_message::sim_to_ref::Replacement* unsafe_arena_release_replace();

  // @@protoc_insertion_point(class_scope:fira_message.sim_to_ref.Packet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::fira_message::sim_to_ref::Commands* cmd_;
  ::fira_message::sim_to_ref::Replacement* replace_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packet_2eproto;
};
// -------------------------------------------------------------------

class Environment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fira_message.sim_to_ref.Environment) */ {
 public:
  inline Environment() : Environment(nullptr) {}
  ~Environment() override;
  explicit constexpr Environment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Environment(const Environment& from);
  Environment(Environment&& from) noexcept
    : Environment() {
    *this = ::std::move(from);
  }

  inline Environment& operator=(const Environment& from) {
    CopyFrom(from);
    return *this;
  }
  inline Environment& operator=(Environment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Environment& default_instance() {
    return *internal_default_instance();
  }
  static inline const Environment* internal_default_instance() {
    return reinterpret_cast<const Environment*>(
               &_Environment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Environment& a, Environment& b) {
    a.Swap(&b);
  }
  inline void Swap(Environment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Environment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Environment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Environment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Environment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Environment& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Environment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fira_message.sim_to_ref.Environment";
  }
  protected:
  explicit Environment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameFieldNumber = 2,
    kFieldFieldNumber = 3,
    kStepFieldNumber = 1,
    kGoalsBlueFieldNumber = 4,
    kGoalsYellowFieldNumber = 5,
  };
  // .fira_message.Frame frame = 2;
  bool has_frame() const;
  private:
  bool _internal_has_frame() const;
  public:
  void clear_frame();
  const ::fira_message::Frame& frame() const;
  PROTOBUF_NODISCARD ::fira_message::Frame* release_frame();
  ::fira_message::Frame* mutable_frame();
  void set_allocated_frame(::fira_message::Frame* frame);
  private:
  const ::fira_message::Frame& _internal_frame() const;
  ::fira_message::Frame* _internal_mutable_frame();
  public:
  void unsafe_arena_set_allocated_frame(
      ::fira_message::Frame* frame);
  ::fira_message::Frame* unsafe_arena_release_frame();

  // .fira_message.Field field = 3;
  bool has_field() const;
  private:
  bool _internal_has_field() const;
  public:
  void clear_field();
  const ::fira_message::Field& field() const;
  PROTOBUF_NODISCARD ::fira_message::Field* release_field();
  ::fira_message::Field* mutable_field();
  void set_allocated_field(::fira_message::Field* field);
  private:
  const ::fira_message::Field& _internal_field() const;
  ::fira_message::Field* _internal_mutable_field();
  public:
  void unsafe_arena_set_allocated_field(
      ::fira_message::Field* field);
  ::fira_message::Field* unsafe_arena_release_field();

  // uint32 step = 1;
  void clear_step();
  uint32_t step() const;
  void set_step(uint32_t value);
  private:
  uint32_t _internal_step() const;
  void _internal_set_step(uint32_t value);
  public:

  // uint32 goals_blue = 4;
  void clear_goals_blue();
  uint32_t goals_blue() const;
  void set_goals_blue(uint32_t value);
  private:
  uint32_t _internal_goals_blue() const;
  void _internal_set_goals_blue(uint32_t value);
  public:

  // uint32 goals_yellow = 5;
  void clear_goals_yellow();
  uint32_t goals_yellow() const;
  void set_goals_yellow(uint32_t value);
  private:
  uint32_t _internal_goals_yellow() const;
  void _internal_set_goals_yellow(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:fira_message.sim_to_ref.Environment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::fira_message::Frame* frame_;
  ::fira_message::Field* field_;
  uint32_t step_;
  uint32_t goals_blue_;
  uint32_t goals_yellow_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packet_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Packet

// .fira_message.sim_to_ref.Commands cmd = 1;
inline bool Packet::_internal_has_cmd() const {
  return this != internal_default_instance() && cmd_ != nullptr;
}
inline bool Packet::has_cmd() const {
  return _internal_has_cmd();
}
inline const ::fira_message::sim_to_ref::Commands& Packet::_internal_cmd() const {
  const ::fira_message::sim_to_ref::Commands* p = cmd_;
  return p != nullptr ? *p : reinterpret_cast<const ::fira_message::sim_to_ref::Commands&>(
      ::fira_message::sim_to_ref::_Commands_default_instance_);
}
inline const ::fira_message::sim_to_ref::Commands& Packet::cmd() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Packet.cmd)
  return _internal_cmd();
}
inline void Packet::unsafe_arena_set_allocated_cmd(
    ::fira_message::sim_to_ref::Commands* cmd) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cmd_);
  }
  cmd_ = cmd;
  if (cmd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fira_message.sim_to_ref.Packet.cmd)
}
inline ::fira_message::sim_to_ref::Commands* Packet::release_cmd() {
  
  ::fira_message::sim_to_ref::Commands* temp = cmd_;
  cmd_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::fira_message::sim_to_ref::Commands* Packet::unsafe_arena_release_cmd() {
  // @@protoc_insertion_point(field_release:fira_message.sim_to_ref.Packet.cmd)
  
  ::fira_message::sim_to_ref::Commands* temp = cmd_;
  cmd_ = nullptr;
  return temp;
}
inline ::fira_message::sim_to_ref::Commands* Packet::_internal_mutable_cmd() {
  
  if (cmd_ == nullptr) {
    auto* p = CreateMaybeMessage<::fira_message::sim_to_ref::Commands>(GetArenaForAllocation());
    cmd_ = p;
  }
  return cmd_;
}
inline ::fira_message::sim_to_ref::Commands* Packet::mutable_cmd() {
  ::fira_message::sim_to_ref::Commands* _msg = _internal_mutable_cmd();
  // @@protoc_insertion_point(field_mutable:fira_message.sim_to_ref.Packet.cmd)
  return _msg;
}
inline void Packet::set_allocated_cmd(::fira_message::sim_to_ref::Commands* cmd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cmd_);
  }
  if (cmd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cmd));
    if (message_arena != submessage_arena) {
      cmd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cmd, submessage_arena);
    }
    
  } else {
    
  }
  cmd_ = cmd;
  // @@protoc_insertion_point(field_set_allocated:fira_message.sim_to_ref.Packet.cmd)
}

// .fira_message.sim_to_ref.Replacement replace = 2;
inline bool Packet::_internal_has_replace() const {
  return this != internal_default_instance() && replace_ != nullptr;
}
inline bool Packet::has_replace() const {
  return _internal_has_replace();
}
inline const ::fira_message::sim_to_ref::Replacement& Packet::_internal_replace() const {
  const ::fira_message::sim_to_ref::Replacement* p = replace_;
  return p != nullptr ? *p : reinterpret_cast<const ::fira_message::sim_to_ref::Replacement&>(
      ::fira_message::sim_to_ref::_Replacement_default_instance_);
}
inline const ::fira_message::sim_to_ref::Replacement& Packet::replace() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Packet.replace)
  return _internal_replace();
}
inline void Packet::unsafe_arena_set_allocated_replace(
    ::fira_message::sim_to_ref::Replacement* replace) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replace_);
  }
  replace_ = replace;
  if (replace) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fira_message.sim_to_ref.Packet.replace)
}
inline ::fira_message::sim_to_ref::Replacement* Packet::release_replace() {
  
  ::fira_message::sim_to_ref::Replacement* temp = replace_;
  replace_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::fira_message::sim_to_ref::Replacement* Packet::unsafe_arena_release_replace() {
  // @@protoc_insertion_point(field_release:fira_message.sim_to_ref.Packet.replace)
  
  ::fira_message::sim_to_ref::Replacement* temp = replace_;
  replace_ = nullptr;
  return temp;
}
inline ::fira_message::sim_to_ref::Replacement* Packet::_internal_mutable_replace() {
  
  if (replace_ == nullptr) {
    auto* p = CreateMaybeMessage<::fira_message::sim_to_ref::Replacement>(GetArenaForAllocation());
    replace_ = p;
  }
  return replace_;
}
inline ::fira_message::sim_to_ref::Replacement* Packet::mutable_replace() {
  ::fira_message::sim_to_ref::Replacement* _msg = _internal_mutable_replace();
  // @@protoc_insertion_point(field_mutable:fira_message.sim_to_ref.Packet.replace)
  return _msg;
}
inline void Packet::set_allocated_replace(::fira_message::sim_to_ref::Replacement* replace) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(replace_);
  }
  if (replace) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replace));
    if (message_arena != submessage_arena) {
      replace = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replace, submessage_arena);
    }
    
  } else {
    
  }
  replace_ = replace;
  // @@protoc_insertion_point(field_set_allocated:fira_message.sim_to_ref.Packet.replace)
}

// -------------------------------------------------------------------

// Environment

// uint32 step = 1;
inline void Environment::clear_step() {
  step_ = 0u;
}
inline uint32_t Environment::_internal_step() const {
  return step_;
}
inline uint32_t Environment::step() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Environment.step)
  return _internal_step();
}
inline void Environment::_internal_set_step(uint32_t value) {
  
  step_ = value;
}
inline void Environment::set_step(uint32_t value) {
  _internal_set_step(value);
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Environment.step)
}

// .fira_message.Frame frame = 2;
inline bool Environment::_internal_has_frame() const {
  return this != internal_default_instance() && frame_ != nullptr;
}
inline bool Environment::has_frame() const {
  return _internal_has_frame();
}
inline const ::fira_message::Frame& Environment::_internal_frame() const {
  const ::fira_message::Frame* p = frame_;
  return p != nullptr ? *p : reinterpret_cast<const ::fira_message::Frame&>(
      ::fira_message::_Frame_default_instance_);
}
inline const ::fira_message::Frame& Environment::frame() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Environment.frame)
  return _internal_frame();
}
inline void Environment::unsafe_arena_set_allocated_frame(
    ::fira_message::Frame* frame) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(frame_);
  }
  frame_ = frame;
  if (frame) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fira_message.sim_to_ref.Environment.frame)
}
inline ::fira_message::Frame* Environment::release_frame() {
  
  ::fira_message::Frame* temp = frame_;
  frame_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::fira_message::Frame* Environment::unsafe_arena_release_frame() {
  // @@protoc_insertion_point(field_release:fira_message.sim_to_ref.Environment.frame)
  
  ::fira_message::Frame* temp = frame_;
  frame_ = nullptr;
  return temp;
}
inline ::fira_message::Frame* Environment::_internal_mutable_frame() {
  
  if (frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::fira_message::Frame>(GetArenaForAllocation());
    frame_ = p;
  }
  return frame_;
}
inline ::fira_message::Frame* Environment::mutable_frame() {
  ::fira_message::Frame* _msg = _internal_mutable_frame();
  // @@protoc_insertion_point(field_mutable:fira_message.sim_to_ref.Environment.frame)
  return _msg;
}
inline void Environment::set_allocated_frame(::fira_message::Frame* frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(frame_);
  }
  if (frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(frame));
    if (message_arena != submessage_arena) {
      frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frame, submessage_arena);
    }
    
  } else {
    
  }
  frame_ = frame;
  // @@protoc_insertion_point(field_set_allocated:fira_message.sim_to_ref.Environment.frame)
}

// .fira_message.Field field = 3;
inline bool Environment::_internal_has_field() const {
  return this != internal_default_instance() && field_ != nullptr;
}
inline bool Environment::has_field() const {
  return _internal_has_field();
}
inline const ::fira_message::Field& Environment::_internal_field() const {
  const ::fira_message::Field* p = field_;
  return p != nullptr ? *p : reinterpret_cast<const ::fira_message::Field&>(
      ::fira_message::_Field_default_instance_);
}
inline const ::fira_message::Field& Environment::field() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Environment.field)
  return _internal_field();
}
inline void Environment::unsafe_arena_set_allocated_field(
    ::fira_message::Field* field) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(field_);
  }
  field_ = field;
  if (field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fira_message.sim_to_ref.Environment.field)
}
inline ::fira_message::Field* Environment::release_field() {
  
  ::fira_message::Field* temp = field_;
  field_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::fira_message::Field* Environment::unsafe_arena_release_field() {
  // @@protoc_insertion_point(field_release:fira_message.sim_to_ref.Environment.field)
  
  ::fira_message::Field* temp = field_;
  field_ = nullptr;
  return temp;
}
inline ::fira_message::Field* Environment::_internal_mutable_field() {
  
  if (field_ == nullptr) {
    auto* p = CreateMaybeMessage<::fira_message::Field>(GetArenaForAllocation());
    field_ = p;
  }
  return field_;
}
inline ::fira_message::Field* Environment::mutable_field() {
  ::fira_message::Field* _msg = _internal_mutable_field();
  // @@protoc_insertion_point(field_mutable:fira_message.sim_to_ref.Environment.field)
  return _msg;
}
inline void Environment::set_allocated_field(::fira_message::Field* field) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(field_);
  }
  if (field) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(field));
    if (message_arena != submessage_arena) {
      field = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, field, submessage_arena);
    }
    
  } else {
    
  }
  field_ = field;
  // @@protoc_insertion_point(field_set_allocated:fira_message.sim_to_ref.Environment.field)
}

// uint32 goals_blue = 4;
inline void Environment::clear_goals_blue() {
  goals_blue_ = 0u;
}
inline uint32_t Environment::_internal_goals_blue() const {
  return goals_blue_;
}
inline uint32_t Environment::goals_blue() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Environment.goals_blue)
  return _internal_goals_blue();
}
inline void Environment::_internal_set_goals_blue(uint32_t value) {
  
  goals_blue_ = value;
}
inline void Environment::set_goals_blue(uint32_t value) {
  _internal_set_goals_blue(value);
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Environment.goals_blue)
}

// uint32 goals_yellow = 5;
inline void Environment::clear_goals_yellow() {
  goals_yellow_ = 0u;
}
inline uint32_t Environment::_internal_goals_yellow() const {
  return goals_yellow_;
}
inline uint32_t Environment::goals_yellow() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Environment.goals_yellow)
  return _internal_goals_yellow();
}
inline void Environment::_internal_set_goals_yellow(uint32_t value) {
  
  goals_yellow_ = value;
}
inline void Environment::set_goals_yellow(uint32_t value) {
  _internal_set_goals_yellow(value);
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Environment.goals_yellow)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sim_to_ref
}  // namespace fira_message

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_packet_2eproto
